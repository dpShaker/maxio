#!/usr/bin/env python3
#
# Script for converting reMarkable tablet ".rm" files to SVG image.
# this works for the new *.rm format, where each page is a separate file
# Credits to:
# - https://github.com/lschwetlick/maxio
# - https://github.com/jmiserez/maxio
# - https://github.com/reHackable/maxio

import sys
import struct
import os.path
import argparse
import re
import json
import logging

import colour

__prog_name__ = "rm2svg"
__version__ = "0.0.2.4"

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s:%(levelname)s:%(name)s:%(message)s')

# Size
default_x_width = 1404
default_y_width = 1872

# TODO: think about using a dedicated module for color management
# Mappings
stroke_colour = {
    0 : colour.Color(rgb=(0   , 0   , 0)),		# black
    1 : colour.Color(rgb=(0.5 , 0.5 , 0.5)),	# grey
    2 : colour.Color(rgb=(1   , 1   , 1)),	    # white
    3 : colour.Color(rgb=(1   , 1   , 0)),	    # yellow
    4 : colour.Color(rgb=(0   , 1   , 0)),		# green
    5 : colour.Color(rgb=(1   , 0.4 , 0.7)),    # pink
    6 : colour.Color(rgb=(0   , 0   , 1)),		# blue
    7 : colour.Color(rgb=(1   , 0   , 0)),	    # red
    8 : colour.Color(rgb=(0   , 0   , 0.39)),	# darkblue
    9 : colour.Color(rgb=(0.39, 0   , 0)),	    # darkred
    10 : colour.Color(rgb=(0  , 0.39, 0)),		# darkgreen
    11 : colour.Color(rgb=(1   , 0.65, 0))	    # orange
}

'''stroke_width={
    0x3ff00000 : 2,
    0x40000000 : 4,
    0x40080000 : 8,
}'''


def main():
    class SkipList(argparse.Action):
        def __call__(self, parser, namespace, values, option_string=None):
            setattr(namespace, self.dest, [ v for v in values.split(',') if v ])

    parser = argparse.ArgumentParser(prog=__prog_name__)
    parser.add_argument('--height',
                        help='Desired height of image',
                        type=float,
                        default=default_y_width)
    parser.add_argument('--width',
                        help='Desired width of image',
                        type=float,
                        default=default_x_width)
    parser.add_argument("-i",
                        "--input",
                        help=".rm input file",
                        required=True,
                        metavar="FILENAME",
                        #type=argparse.FileType('r')
                        )
    parser.add_argument("-o",
                        "--output",
                        help="prefix for output files",
                        required=True,
                        metavar="NAME",
                        #type=argparse.FileType('w')
                        )
    parser.add_argument("-c",
                        "--coloured_annotations",
                        help="Colour annotations for document markup.",
                        action='store_true',
                        )
    parser.add_argument("-s",
                        "--skip_layers",
                        help="List of layers to be skipped.",
                        action=SkipList
                        )
    parser.add_argument('--version',
                        action='version',
                        version='%(prog)s {version}'.format(version=__version__))
    args = parser.parse_args()

    if not os.path.exists(args.input):
        parser.error('The file "{}" does not exist!'.format(args.input))
    rm2svg(args.input, args.output, args.coloured_annotations, args.skip_layers if args.skip_layers is not None else [],
           args.width, args.height)



def abort(msg):
    print(msg, file=sys.stderr)
    sys.exit(1)


def rm2svg(input_file, output_name, coloured_annotations=False, skip_list=[],
           x_width=default_x_width, y_width=default_y_width):
    # Read the file in memory. Consider optimising by reading chunks.

    logger = logging.getLogger("rm2svg")
    logger.setLevel(logging.INFO)

    with open(input_file, 'rb') as f:
        data = f.read()
    offset = 0

    # Is this a reMarkable .lines file?
#    expected_header=b'reMarkable .lines file, version=#   '
    expected_header_v3=b'reMarkable .lines file, version=3          '
    expected_header_v5=b'reMarkable .lines file, version=5          '

    # TODO: check for other headers
    if len(data) < len(expected_header_v5) + 4:
        abort('File too short to be a valid file')

    fmt = '<{}sI'.format(len(expected_header_v5))
    header, nlayers = struct.unpack_from(fmt, data, offset); offset += struct.calcsize(fmt)

    is_v3 = (header == expected_header_v3)
    is_v5 = (header == expected_header_v5)
    if (not is_v3 and not is_v5) or nlayers < 1:
        abort('Not a valid reMarkable file: <header={}><nlayers={}>'.format(header, nlayers))
        return

    try:
        with open(input_file[:-3] + "-metadata.json") as f:
            metadata = json.load(f)
    except:
        metadata = None

    output = open(output_name, 'w')
    output.write('<svg xmlns="http://www.w3.org/2000/svg" height="{}" width="{}">'.format(y_width, x_width)) # BEGIN Notebook
    output.write('''
        <script type="application/ecmascript"> <![CDATA[
            var visiblePage = 'p1';
            function goToPage(page) {
                document.getElementById(visiblePage).setAttribute('style', 'display: none');
                document.getElementById(page).setAttribute('style', 'display: inline');
                visiblePage = page;
            }
        ]]> </script>
    ''')

    # Iterate through pages (There is at least one)
    output.write('<g id="p1" style="display:inline"><filter id="blurMe"><feGaussianBlur in="SourceGraphic" stdDeviation="10" /></filter>\n')

    # Iterate through layers on the page (There is at least one)
    layer_cnt = 0
    for layer in range(nlayers):
        fmt = '<I'
        (nstrokes,) = struct.unpack_from(fmt, data, offset); offset += struct.calcsize(fmt)

        layer_name = metadata['layers'][layer_cnt]['name'] if metadata is not None else f"Layer_{layer_cnt}"
        logger.debug(f"New layer: name={layer_name}, nstrokes={nstrokes}")

        output.write(f"<g id=\"{layer_name}\">\n")

        # Iterate through the strokes in the layer (If there is any)
        for stroke in range(nstrokes):
            if is_v3:
                fmt = '<IIIfI'
                pen_nr, color, i_unk, width, nsegments = struct.unpack_from(fmt, data, offset); offset += struct.calcsize(fmt)
                logger.debug('V3: Stroke {}: pen_nr={}, colour={}, width={}, nsegments={}'.format(stroke, pen_nr, color, width, nsegments))
            if is_v5:
                fmt = '<IIIffI'
                pen_nr, color, i_unk, width, unknown, nsegments = struct.unpack_from(fmt, data, offset); offset += struct.calcsize(fmt)
                logger.debug('V5: Stroke {}: pen_nr={}, colour={}, width={}, unknown={}, nsegments={}'.format(stroke, pen_nr, color, width, unknown, nsegments))
            
            last_x = -1.; last_y = -1.

            pen = Pen.factory(pen_nr)(width, color, coloured_annotations)
            try:
                pen.base_color = colour.Color(layer_name)
                pen.base_color.saturation = 1 - (color * 0.33)
            except ValueError as e:
                pass
            except AttributeError as e:
                print(f"Unrecognized color code {layer_name}. If you use phonic values, check you didn't start by '#'")
                pen.base_color = stroke_color[0]
                pen.base_color.saturation = 1 - (color * 0.33)
            svg_segment = pen.svg.segment(width)

            # Iterate through the segments to form a polyline
            for segment in range(nsegments):
                fmt = '<ffffff'
                xpos, ypos, speed, tilt, width, pressure = struct.unpack_from(fmt, data, offset); offset += struct.calcsize(fmt)

                ratio = (y_width/x_width)/(1872/1404)
                if ratio > 1:
                    xpos = ratio*((xpos*x_width)/1404)
                    ypos = (ypos*y_width)/1872
                else:
                    xpos = (xpos*x_width)/1404
                    ypos = (1/ratio)*(ypos*y_width)/1872
                if segment % pen.segment_length == 0:
                    svg_segment = pen.svg.segment(width, speed, tilt, pressure)
                    if last_x != -1.:
                        svg_segment.add_point(last_x, last_y)
                last_x = xpos; last_y = ypos
                svg_segment.add_point(xpos, ypos)

            if layer_name not in skip_list:
                output.write(str(pen.svg))

        if layer_name in skip_list:
            output.write("<!-- SKIPPED -->\n")

        output.write('</g>\n')
        layer_cnt += 1

    # Overlay the page with a clickable rect to flip pages
    output.write('<rect x="0" y="0" width="{}" height="{}" fill-opacity="0"/>'.format(x_width, y_width))
    output.write('</g>') # Closing page group
    output.write('</svg>') # END notebook
    output.close()

def extract_data(input_file):
    """
    gets stroke information as a list. Useful for figuring out which value does what.
    """

    with open(input_file, 'rb') as f:
        data = f.read()
    offset = 0

    # Is this a reMarkable .lines file?
    expected_header_v3=b'reMarkable .lines file, version=3          '
    expected_header_v5=b'reMarkable .lines file, version=5          '
    if len(data) < len(expected_header_v5) + 4:
        abort('File too short to be a valid file')

    fmt = '<{}sI'.format(len(expected_header_v5))
    header, nlayers = struct.unpack_from(fmt, data, offset); offset += struct.calcsize(fmt)
    is_v3 = (header == expected_header_v3)
    is_v5 = (header == expected_header_v5)
    if (not is_v3 and not is_v5) or  nlayers < 1:
        abort('Not a valid reMarkable file: <header={}><nlayers={}>'.format(header, nlayers))
        return

    my_list = []
    for layer in range(nlayers):
        fmt = '<I'
        (nstrokes,) = struct.unpack_from(fmt, data, offset); offset += struct.calcsize(fmt)

        # Iterate through the strokes in the layer (If there is any)
        for stroke in range(nstrokes):
            if is_v5:
                fmt = '<IIIffI'
                pen, colour, i_unk, width, i_unk4, nsegments = struct.unpack_from(fmt, data, offset); offset += struct.calcsize(fmt)
                #print('Stroke {}: pen={}, colour={}, width={}, unknown={}, nsegments={}'.format(stroke, pen, colour, width, unknown, nsegments))

            # Iterate through the segments to form a polyline
            for segment in range(nsegments):
                fmt = '<ffffff'
                xpos, ypos, pressure, tilt, i_unk2, i_unk3 = struct.unpack_from(fmt, data, offset); offset += struct.calcsize(fmt)
                #xpos += 60
                #ypos -= 20
                my_list.append([pen, colour, i_unk, width, i_unk4, nsegments, xpos, ypos, pressure, tilt, i_unk2, i_unk3])
    return my_list


class Pen:
    class SVGCreator:
        class Segment:
            def __init__(self, svg):
                self.__svg = svg
                self.output = ""
                self.last_x = self.last_y = None

            @property
            def _pen(self):
                return self.__svg._pen

            def _start(self, width, speed, tilt, pressure, last_width):
                """ Start new polyline segment to draw stroke with current segment information """
                output, self.__svg._segment_last_width = self._pen._cb_new_segment(width, speed, tilt, pressure, self.__svg._segment_last_width)
                self.output += output
                return self

            def add_point(self, xpos, ypos):
                threshold = self._pen.sharpen_threshold
                if None not in (self.last_x, self.last_y):
                    diff_x = abs(self.last_x - xpos)
                    diff_y = abs(self.last_y - ypos)
                    s = ""
                    try:
                        if diff_x**2 + diff_y**2 < threshold:
                            s = " -> skipped"
                            return
                    finally:
                        self._pen.logger.debug(f"SVG:add_point/sharpen {xpos:19.14f},{ypos:19.14f} (Offset: {diff_x:17.14f},{diff_y:17.14f}) -> {diff_x**2 + diff_y**2} < {threshold}{s}")

                """  Add point to polyline segment """
                self.output += '{:.3f},{:.3f} '.format(xpos, ypos)
                self.last_x = xpos
                self.last_y = ypos

            def __str__(self):
                return self.output + '"/>\n'

        def __init__(self, pen):
            self._pen = pen
            self.__segments = []
            self._segment_last_width = 0
            self.output = ''

        def segment(self, width, speed = None, tilt = None, pressure = None, last_width = None):
            s = Pen.SVGCreator.Segment(self)
            self.__segments.append(s)
            return s._start(width, speed, tilt, pressure, last_width)

        def __str__(self):
            out = '<!-- pen: {} -->\n'.format(self._pen.name)
            for s in self.__segments:
                out += str(s)
            return out

    name = "Basic Pen"
    def __init__(self, base_width, base_color):
        self.logger = logging.getLogger(self.name)
        self.logger.setLevel(logging.INFO)
        self.base_width = base_width
        self.base_color = stroke_colour[base_color]
        self.segment_length = 1000
        self.stroke_cap = "round"
        self.base_opacity = 1
        self.svg = Pen.SVGCreator(self)
        self.sharpen_threshold = self.base_width / 5

    def _cb_new_segment(self, width, speed, tilt, pressure, last_width):
        """
            Callback to format stroke of new segment. Needs to return (format string [unterminated to allow adding points], segment_width).
            This function can be overloaded by the dedicated Pens if needed.
        """
        segment_width = width
        segment_color = self.base_color.rgb
        segment_opacity = self.base_opacity

        if not None in (speed, tilt, pressure, last_width):
            segment_color = self.get_segment_color(speed, tilt, width, pressure, last_width)
            segment_width = self.get_segment_width(speed, tilt, width, pressure, last_width)
            segment_opacity = self.get_segment_opacity(speed, tilt, width, pressure, last_width)

        segment_color = tuple(map(lambda x: x*255, segment_color))

        output = '<polyline style="fill:none;stroke:rgb{};stroke-width:{:.3f};opacity:{}" stroke-linecap="{}" points="'.format(
                         segment_color, segment_width, segment_opacity, self.stroke_cap)
        return output, segment_width

    def get_segment_width(self, speed, tilt, width, pressure, last_width):
        return self.base_width

    def get_segment_color(self, speed, tilt, width, pressure, last_width):
        return self.base_color.rgb

    def get_segment_opacity(self, speed, tilt, width, pressure, last_width):
        return self.base_opacity

    def cutoff(self, value):
        """must be between 1 and 0"""
        value = min(value, 1)
        value = max(0, value)
        return value

    @staticmethod
    def factory(pen_nr):
        for child in Pen.__subclasses__():
            if pen_nr in child.ids:
                return child
        print('Unknown pen_nr: {}'.format(pen_nr))
        return Unknown


class Fineliner(Pen):
    ids = (4, 17)
    name = "Fineliner"
    def __init__(self, base_width, base_color, coloured_annotations = False):
        super().__init__(base_width, base_color)
        self.base_width = (base_width ** 2.1) * 1.3
        self.sharpen_threshold = 2.5

    def get_segment_width(self, speed, tilt, width, pressure, last_width):
        segment_width = width
        self.logger.debug(f"segment_width: Pressure: {pressure}; Speed: {speed}; Tilt: {tilt}; Width: {width}/{last_width} -> Segment Width: {segment_width}")
        return segment_width


class Ballpoint(Pen):
    ids = (2, 15)
    name = "Ballpoint"
    def __init__(self, base_width, base_color, coloured_annotations = False):
        super().__init__(base_width, base_color)
        self.segment_length = 5

    def get_segment_width(self, speed, tilt, width, pressure, last_width):
        segment_width = (0.3 + pressure) + (0.8 * width) - 0.5*(speed/50)
        self.logger.debug(f"segment_width: Pressure: {pressure}; Speed: {speed}; Tilt: {tilt}; Width: {width}/{last_width} -> Segment Width: {segment_width}")
        return segment_width

    def get_segment_color(self, speed, tilt, width, pressure, last_width):
        intensity = (0.1 * -(speed / 35)) + (1.2 * pressure) + 0.5
        intensity = self.cutoff(intensity)
        # using segment color not opacity because the dots interfere with each other.
        # Color must be 255 rgb
        rev_intensity = abs(intensity - 1)
        # TODO: this needs some testing and maybe fixes
        segment_color = [max(0, self.base_color.rgb[0] + rev_intensity * (1-self.base_color.rgb[0])),
                         max(0, self.base_color.rgb[1] + rev_intensity * (1-self.base_color.rgb[1])),
                         max(0, self.base_color.rgb[2] + rev_intensity * (1-self.base_color.rgb[2]))]
        self.logger.debug(f"segment_color: Pressure: {pressure}; Speed: {speed}; Tilt: {tilt}; Width: {width}/{last_width} -> Intensity: {intensity} => Color: {segment_color}")
        return tuple(segment_color)

    # def get_segment_opacity(self, speed, tilt, width, pressure, last_width):
    #     segment_opacity = (0.2 * -(speed / 35)) + (0.8 * pressure)
    #     segment_opacity *= segment_opacity
    #     segment_opacity = self.cutoff(segment_opacity)
    #     return segment_opacity

class Marker(Pen):
    ids = (3, 16)
    name = "Marker"
    def __init__(self, base_width, base_color, coloured_annotations = False):
        super().__init__(base_width, base_color)
        self.base_opacity = 0.8
        self.segment_length = 3
        self.sharpen_threshold = 2

    def get_segment_width(self, speed, tilt, width, pressure, last_width):
        segment_width = 0.9 * (((1 * width)) - 0.4 * tilt) + (0.1 * last_width)
        self.logger.debug(f"segment_width: Pressure: {pressure}; Speed: {speed}; Tilt: {tilt}; Width: {width}/{last_width} -> Segment Width: {segment_width}")
        return segment_width


class Pencil(Pen):
    ids = (1, 14)
    name = "Pencil"
    def __init__(self, base_width, base_color, coloured_annotations = False):
        if coloured_annotations:
            if base_color == 1:
                base_color = 4
        super().__init__(base_width, base_color)
        self.base_width = self.base_width * 2
        self.base_opacity = 0.8
        self.segment_length = 2

    def get_segment_width(self, speed, tilt, width, pressure, last_width):
        segment_width = 0.7 * ((((0.8*self.base_width) + (0.5 * pressure)) * (1 * width)) - (0.25 * tilt**1.8) - (0.6 * speed / 50))
       #segment_width = 1.3*(((self.base_width * 0.4) * pressure) - 0.5 * ((tilt ** 0.5)) + (0.5 * last_width))
        max_width = self.base_width
        self.logger.debug(f"segment_width: Pressure: {pressure}; Speed: {speed}; Tilt: {tilt}; Width: {width}/{last_width} -> Segment Width: min({segment_width},{max_width})")
        return min(segment_width, max_width)

    def get_segment_opacity(self, speed, tilt, width, pressure, last_width):
        segment_opacity = (0.1 * -(speed / 35)) + (1 * pressure)
        self.logger.debug(f"segment_opacity: Pressure: {pressure}; Speed: {speed}; Tilt: {tilt}; Width: {width}/{last_width} -> Opacity: min({self.cutoff(segment_opacity) - 0.1},{self.base_opacity})")
        return min(self.cutoff(segment_opacity) - 0.1, self.base_opacity)


class Mechanical_Pencil(Pen):
    ids = (7, 13)
    name = "Mechanical Pencil"
    def __init__(self, base_width, base_color, coloured_annotations = False):
        super().__init__(base_width, base_color)
        self.base_opacity = 0.9
        self.sharpen_threshold = 0.1
        self.segment_length = 3
        self.base_color = stroke_colour[1]

    def get_segment_width(self, speed, tilt, width, pressure, last_width):
        segment_width = 0.6 * (pressure**2 * (self.base_width + width))
        self.logger.debug(f"segment_width: Pressure: {pressure}; Speed: {speed}; Tilt: {tilt}; Width: {width}/{last_width} -> Segment Width: {segment_width}")
        return segment_width

    def get_segment_color(self, speed, tilt, width, pressure, last_width):
        intensity = self.cutoff(pressure)
        rev_intensity = abs(intensity - 1)
        segment_color = (max(0, self.base_color.rgb[0] + rev_intensity * (1-self.base_color.rgb[0])),
                         max(0, self.base_color.rgb[1] + rev_intensity * (1-self.base_color.rgb[1])),
                         max(0, self.base_color.rgb[2] + rev_intensity * (1-self.base_color.rgb[2])))
        self.logger.debug(f"segment_color: Pressure: {pressure} => Color: {segment_color}")
        return segment_color


class Brush(Pen):
    ids = (0, 12)
    name = "Brush"
    def __init__(self, base_width, base_color, coloured_annotations = False):
        if coloured_annotations:
            if base_color == 0:
                base_color = 10
            elif base_color == 1:
                base_color = 9
            elif base_color == 2:
                base_color = 8
        super().__init__(base_width, base_color)
        self.segment_length = 2
        self.stroke_cap = "round"
        self.opacity = 1

    def get_segment_width(self, speed, tilt, width, pressure, last_width):
        segment_width = 0.7 * (((1 + (1.4 * pressure)) * (1 * width)) - (0.5 * tilt) - (0.5 * speed / 50))  #+ (0.2 * last_width)
        max_width = self.base_width * 7
        self.logger.debug(f"segment_width: Pressure: {pressure}; Speed: {speed}; Tilt: {tilt}; Width: {width}/{last_width} -> Segment Width: min({segment_width}, {max_width})")
        return min(segment_width, max_width)

    def get_segment_color(self, speed, tilt, width, pressure, last_width):
        intensity = (pressure ** 1.5  - 0.2 * (speed / 50))*1.5
        intensity = self.cutoff(intensity)
        # using segment color not opacity because the dots interfere with each other.
        # Color must be 255 rgb
        rev_intensity = abs(intensity - 1)
        # TODO: this needs some testing and maybe fixes
        segment_color = [max(0, self.base_color.rgb[0] + rev_intensity * (1-self.base_color.rgb[0])),
                         max(0, self.base_color.rgb[1] + rev_intensity * (1-self.base_color.rgb[1])),
                         max(0, self.base_color.rgb[2] + rev_intensity * (1-self.base_color.rgb[2]))]
        self.logger.debug(f"segment_color: Pressure: {pressure}; Speed: {speed}; Tilt: {tilt}; Width: {width}/{last_width} -> Intensity: {intensity} => Color: {segment_color}")
        return tuple(segment_color)


class Highlighter(Pen):
    ids = (5, 18)
    name = "Highlighter"
    def __init__(self, base_width, base_color, coloured_annotations = False):
        super().__init__(base_width, base_color)
        self.base_width = 20
        self.stroke_cap = "butt"
        self.base_opacity = 0.3
        self.sharpen_threshold = 5


class Eraser(Pen):
    ids = (6,)
    name = "Eraser"
    def __init__(self, base_width, base_color = 2, coloured_annotations = False):
        if base_color == 0:
            base_color = 2
        super().__init__(base_width, base_color)
        self.stroke_cap = "round"
        self.base_width = self.base_width * 2

class Erase_Area(Pen):
    ids = (8,)
    name = "Erase Area"
    def __init__(self, base_width, base_color = 2, coloured_annotations = False):
        if base_color == 0:
            base_color = 2
        super().__init__(base_width, base_color)
        self.stroke_cap = "square"
        self.base_opacity = 0


class Calligraphy(Pen):
    ids = (21, )
    name = "Calligraphy"
    def __init__(self, base_width, base_color, coloured_annotations = False):
        if coloured_annotations:
            if base_color == 0:
                base_color = 4
            elif base_color == 1:
                base_color = 10
            elif base_color == 2:
                base_color = 7
        super().__init__(base_width, base_color)
        self.segment_length = 2

    def get_segment_width(self, speed, tilt, width, pressure, last_width):
        segment_width = 0.5 * (((1 + pressure) * (0.9 * width)) - 0.25 * tilt) + (0.25 * last_width)
        max_width = self.base_width * 5
        self.logger.debug(f"segment_width: Pressure: {pressure}; Speed: {speed}; Tilt: {tilt}; Width: {width}/{last_width} -> Segment Width: min({segment_width}, {max_width})")
        return min(segment_width, max_width)

class Unknown(Pen):
    ids = (-1,)
    name = "Unknown"
    def __init__(self, base_width, base_color, coloured_annotations = False):
        super().__init__(base_width, 4 if coloured_annotations else base_color)
        self.stroke_cap = "square"
        self.base_opacity = 0.3

if __name__ == "__main__":
    main()
